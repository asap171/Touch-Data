package touchauthentication;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import weka.core.Instances;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import weka.classifiers.Classifier;
//import weka.experiment.Stats;
import weka.classifiers.Evaluation;
import weka.classifiers.evaluation.NumericPrediction;
import weka.classifiers.trees.RandomTree;
import weka.core.FastVector;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sarbjit
 */
public class TouchUI extends javax.swing.JFrame {
    static String workDir = System.getProperty("user.dir");
    static String filename = workDir+"\\Touch.csv";
    
//    Path currentRelativePath = Paths.get("");
//    String dataP = currentRelativePath.toAbsolutePath().toString();
    String adb=workDir+"\\adb.exe ";
    String command="shell getevent -lt /dev/input/event1";
    File file = new File(filename);
    FileWriter fstream = new FileWriter(filename, true);
    BufferedWriter Bout = new BufferedWriter(fstream);
    public static double press, press1, distance, time, timeAverage, averagePressure, velocit = 0.0;
    public static int startX, endX, endX1, startY, endY, endY1, pressCount = 0;
    public static String tid,major,pressS,x,y,slot,syc;
    int ID ;
    int seconds ;
    final int minutes=1;
    double avgP=0;
    double P=0;
    int count; 
    private static final String NEWLINE = System.getProperty("line.separator");
    /**
     * Creates new form TouchUI
     * @throws java.io.IOException
     */
    public TouchUI() throws IOException {
            
          initComponents();
         // System.out.println(filename);
      }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(179, 252, 245));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("           Touch Based Active Authentication");

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton2.setText("Analyze");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(294, 294, 294)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jButton1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                .addComponent(jLabel3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
//         try {
//             //TODO add your handling code here: for save touch data
//            makeid();
//        } catch (IOException ex) {
//            Logger.getLogger(TouchUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        ID++;
    press= press1= distance= time= timeAverage= averagePressure=velocit = 0.0;

        final String head = "User,Time,ABS_MT_TRACKING_ID,ABS_MT_TOUCH_MAJOR,ABS_MT_PRESSURE,ABS_MT_POSITION_X,ABS_MT_POSITION_Y,ABS_MT_SLOT,SYN_REPORT,AvePressure,Distance,AveTime,Velocity";
        seconds=minutes*60;
        jButton1.setEnabled(false);
        ID++;
       
    Thread t = new Thread(new Runnable() {
        
    @Override
    public void run() {
         while (seconds>0){ try {            
             //timer
             jLabel3.setText("Saving New User's Activities to the Database. "+seconds+" Seconds Remaning");
            
             Thread.sleep(1000L);//1000L = 1000ms = 1sec
             } catch (InterruptedException ex) {
                 Logger.getLogger(TouchUI.class.getName()).log(Level.SEVERE, null, ex);
             } seconds--;
             }
    }
     });
             t.start();
     Thread h = new Thread(new Runnable() {
    @Override
    public void run() {
        String data;
        
        try {        
            Process p = Runtime.getRuntime().exec(adb+command);
//          System.out.println(p.getOutputStream());
            BufferedReader reader=new BufferedReader( new InputStreamReader(p.getInputStream()));
                tid=major=pressS=x=y=slot=syc=null;
            while ((data = reader.readLine()) != null){
                count++;
                String S = ("User,"+ID+",Time"+data.replaceAll("[\\[\\]\\s]+", ",")+ ("AvePressure," + averagePressure + ",Distance," + distance + ",AveTime," + timeAverage + ",Velocity," + velocit));
                String[] d = S.split(",");
                if(d.length > 13){                    
                    if(d[1].isEmpty()){
                        Bout.write(head);//write good header
                        Bout.append(NEWLINE);//newline
                        ID = 0;
                        d[1] = Integer.toString(ID);
                    }else{
                        ID = Integer.parseInt(d[1]);
                        d[1] = Integer.toString(ID);
                   }
                    if(d[5].equals("ABS_MT_PRESSURE")){
                        press += Double.parseDouble(d[6]);
                        pressCount++;
                        averagePressure = press/pressCount;
//                        System.out.println(averagePressure);
                    }
//                    if(d[5].equals("ABS_MT_TRACKINGID")){
//                        distance = 0.0;
                    String trackingID = d[6];
                    String trackingID1 = "ffffffff";
                        
                    if(!trackingID.equals(trackingID1)){
                        if(d[5].equals("ABS_MT_POSITION_X")){
                            startX = Integer.parseInt(d[6], 16);
//                            tempX = Integer.parseInt(d[16], 16);
//                            endX = tempX;
                             endX1 = d[6].length();
                             endX = endX1 * 16;
                        }
                        if(d[5].equals("ABS_MT_POSITION_Y")){
                            startY = Integer.parseInt(d[6], 16);
//                            tempY = Integer.parseInt(d[16], 16);
//                            endX = tempY;
                              endY1 = d[6].length();
                              endY = endY1 * 16;
                        }
                        distance = Math.sqrt((endX-startX)*(endX-startX)+(endY-startY)*(endY-startY));
                    }
//                  }
                    for (String d1 : d) {
                        if(d[2].equals("Time")){
                            time +=Double.parseDouble(d[3]);
                            timeAverage = time/count;
                        }
                        //System.out.println(timeAverage);
                    }
                    velocit = distance/timeAverage;
                    
                    
                          
                           String[] h ;
                           //String fileN = workDir + "\\Touchold.csv";
                           
                                   h = S.split(",");
                                    if(h.length > 12){
                                        if(h[2].equals("Time")){
                                            tid=h[3];}
//                                            timeAverage = 0.0;
//                                            time = 0.0;
//                                            time +=Double.parseDouble(h[2]);
//                                            timeAverage = time/count;
                                        if (h[5].equals("ABS_MT_TOUCH_MAJOR")){
                                            major=(h[6]);}
                                        if (h[5].equals( "ABS_MT_PRESSURE")){
                                            pressS=(h[6]);
//                                            averagePressure = 0.0;
//                                            press1 = 0.0;
//                                            press1 += Double.parseDouble(h[4]);
//                                            pressCount++;
//                                            averagePressure = press1/pressCount;
                                        }
                                        if (h[5].equals("ABS_MT_TRACKING_ID")){
                                            tid=(h[6]);}
//                                        String trackingID2 = d[6];
//                                        String trackingID3 = "ffffffff";
//                                        if(!trackingID2.equals(trackingID3)){
                                        if (h[5].equals( "ABS_MT_POSITION_X")){
                                            x=(h[6]);
//                                            startX = Integer.parseInt(h[5], 16);
//                                            endX1 = d[5].length();
//                                            endX = endX1 * 16;
                                        }
                                        if (h[5].equals( "ABS_MT_POSITION_Y")){
                                            y=(h[6]);
//                                            startY = Integer.parseInt(h[6], 16);
//                                            endY1 = h[6].length();
//                                            endY = endY1 * 16;
                                        }
                                        distance = Math.sqrt((endX-startX)*(endX-startX)+(endY-startY)*(endY-startY));
                                        //}
                                        if (h[5].equals( "ABS_MT_SLOT"))
                                            slot=(h[6]);
                                        if (h[5].equals("SYN_REPORT"))
                                            syc=(h[6]); 
                                        System.out.println(h[1]+","+h[3]+","+tid+","+major+","+pressS+","+x+","+y+","+slot+","+syc+","+h[8]+","+h[10]+","+h[12]+","+h[14]);
                                        Bout.write(h[1]+","+h[3]+","+tid+","+major+","+pressS+","+x+","+y+","+slot+","+syc+","+h[8]+","+h[10]+","+h[12]+","+h[14]);
                                        Bout.append(NEWLINE);
                                      
                                        //System.out.println(line);      
                               //Bout.close();//close reader
                        
                    }
//                    Bout.write(S);
//                    System.out.print(S);
//                    Bout.append(NEWLINE);
                }
                
//                System.out.println("User,"+ID+",Time"+data.replaceAll("[\\[\\]\\s]+", ","));
//           count++;
//           String[] d = data.split(",");
//             if (d[5].equals("ABS_MT_PRESSURE")){
//                P += Integer.parseInt(d[6]);
//                avgP = P/count;
//                System.out.println(avgP);
//             }
                if(seconds <=-1){
                    jButton1.setEnabled(true);
                    jLabel3.setText("Done Saving Check Projecet Folder for Database. ");
                    Runtime.getRuntime().exec("pkill adb").waitFor();
                    //Bout.close();
                    break;
                }
//                try {
//                    Bout.close();
//                } catch (IOException ex) {
//                    Logger.getLogger(TouchUI.class.getName()).log(Level.SEVERE, null, ex);
//                }
            
            }
        } catch (IOException ex) {
            Logger.getLogger(TouchUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(TouchUI.class.getName()).log(Level.SEVERE, null, ex);
        }
     } 
     });    
             h.start();
            
    } 
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         try {
            // TODO add your handling code here:
            jButton1.setEnabled(false);
            jLabel2.setText(analyze());
            //jLabel2.setText(classify());
        } catch (Exception ex) {
            Logger.getLogger(TouchUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TouchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TouchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TouchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TouchUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new TouchUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(TouchUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
         
    }
    private static String analyze() throws Exception{
         try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
             String p;
            while ((p = br.readLine()) != null) {

                // use comma as separator
                String[] t = p.split(",");

                System.out.println(t);

            }

        } catch (IOException e) {
            e.printStackTrace();
        }
         return null;
    }
        
//  public static BufferedReader readDataFile(filename) {
//        BufferedReader inputReader = null;
//        
//        try {
//            inputReader = new BufferedReader(new FileReader(filename));
//        } catch (FileNotFoundException ex) {
//            System.err.println("File not found: " + filename);
//        }
//        
//        return inputReader;
//    
    
    public static Evaluation simpleClassify(Classifier model, Instances trainingSet, Instances testingSet) throws Exception {
        Evaluation validation = new Evaluation(trainingSet);
        
        model.buildClassifier(trainingSet);
        validation.evaluateModel(model, testingSet);
        
        return validation;
    }
    
    public static double calculateAccuracy(FastVector predictions) {
        double correct = 0;
        
        for (int i = 0; i < predictions.size(); i++) {
            NumericPrediction np = (NumericPrediction) predictions.elementAt(i);
            if (np.predicted() == np.actual()) {
                correct++;
            }
        }
        
        return 100 * correct / predictions.size();
    }
    
    public static Instances[][] crossValidationSplit(Instances data, int numberOfFolds) {
        Instances[][] split = new Instances[2][numberOfFolds];
        
        for (int i = 0; i < numberOfFolds; i++) {
            split[0][i] = data.trainCV(numberOfFolds, i);
            split[1][i] = data.testCV(numberOfFolds, i);
        }
        
        return split;
    }
    
    /**
     *
     * @param args
     * @throws Exception
     */
    public static void classify() throws IOException, Exception  {
        // I've commented the code as best I can, at the moment.
        
        BufferedReader datafile = new BufferedReader(new FileReader(filename));
        
        Instances data = new Instances(datafile);
        data.setClassIndex(data.numAttributes() - 1);

        // Choose a type of validation split
        Instances[][] split = crossValidationSplit(data, 10);
        
        // Separate split into training and testing arrays
        Instances[] trainingSplits = split[0];
        Instances[] testingSplits  = split[1];
        
        // Trying differents classifiers to which one gives us a better accuracy
        Classifier[] models = {     //new RandomForest(),
                                   // new SMOreg(),
                                    new RandomTree() };
        
        // Run for each classifier model
        for(int j = 0; j < models.length; j++) {

            // Collect every group of predictions for current model in a FastVector
            FastVector predictions = new FastVector();
            
            // For each training-testing split pair, train and test the classifier
            for(int i = 0; i < trainingSplits.length; i++) {
                Evaluation validation = simpleClassify(models[j], trainingSplits[i], testingSplits[i]);
                predictions.appendElements(validation.predictions());
                
                // summary for each training-testing pair.
                 System.out.println(models[j].toString());
            }
            
            // Calculate overall accuracy of current classifier on all splits
            double accuracy = calculateAccuracy(predictions);
            
            // Outputing current classifier's name and accuracy.
            System.out.println(models[j].getClass().getSimpleName() + ": " + String.format("%.2f%%", accuracy) + "\n=====================");
            //    jLabel2.setText(models[j].getClass().getSimpleName() + ": " + String.format("%.2f%%", accuracy) + "\n=====================");
        }
        
    
}

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
